{
  "version": "5",
  "$schema": "schema.json",
  "connectionSettings": {
    "connectionUri": {
      "variable": "CONNECTION_URI"
    },
    "poolSettings": {
      "maxConnections": 50,
      "poolTimeout": 30,
      "idleTimeout": 180,
      "checkConnectionAfterIdle": 60,
      "connectionLifetime": 600
    },
    "isolationLevel": "ReadCommitted"
  },
  "metadata": {
    "tables": {
      "actor": {
        "schemaName": "public",
        "tableName": "actor",
        "columns": {
          "actor_id": {
            "name": "actor_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": "A surrogate primary key used to uniquely identify each actor in the table."
          },
          "first_name": {
            "name": "first_name",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nonNullable",
            "description": "The actor first name."
          },
          "last_name": {
            "name": "last_name",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nonNullable",
            "description": "The actor last name."
          },
          "last_update": {
            "name": "last_update",
            "type": {
              "scalarType": "timestamp"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": "When the row was created or most recently updated."
          }
        },
        "uniquenessConstraints": {
          "actor_pkey": [
            "actor_id"
          ]
        },
        "foreignRelations": {},
        "description": "The actor table lists information for all actors.\n\nThe actor table is joined to the film table by means of the film_actor table."
      },
      "actor_info": {
        "schemaName": "public",
        "tableName": "actor_info",
        "columns": {
          "actor_id": {
            "name": "actor_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nullable",
            "description": null
          },
          "film_info": {
            "name": "film_info",
            "type": {
              "scalarType": "text"
            },
            "nullable": "nullable",
            "description": null
          },
          "first_name": {
            "name": "first_name",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nullable",
            "description": null
          },
          "last_name": {
            "name": "last_name",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nullable",
            "description": null
          }
        },
        "uniquenessConstraints": {},
        "foreignRelations": {},
        "description": null
      },
      "address": {
        "schemaName": "public",
        "tableName": "address",
        "columns": {
          "address": {
            "name": "address",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nonNullable",
            "description": " The first line of an address."
          },
          "address2": {
            "name": "address2",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nullable",
            "description": " An optional second line of an address."
          },
          "address_id": {
            "name": "address_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " A surrogate primary key used to uniquely identify each address in the table."
          },
          "city_id": {
            "name": "city_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": " A foreign key pointing to the city table."
          },
          "district": {
            "name": "district",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nonNullable",
            "description": " The region of an address, this may be a state, province, prefecture, etc."
          },
          "last_update": {
            "name": "last_update",
            "type": {
              "scalarType": "timestamp"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " When the row was created or most recently updated."
          },
          "phone": {
            "name": "phone",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nonNullable",
            "description": " The telephone number for the address."
          },
          "postal_code": {
            "name": "postal_code",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nullable",
            "description": " The postal code or ZIP code of the address (where applicable)."
          }
        },
        "uniquenessConstraints": {
          "address_pkey": [
            "address_id"
          ]
        },
        "foreignRelations": {
          "address_city_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "city",
            "columnMapping": {
              "city_id": "city_id"
            }
          }
        },
        "description": "The address table contains address information for customers, staff, and stores.\n\nThe address table primary key appears as a foreign key in the customer, staff, and store tables."
      },
      "category": {
        "schemaName": "public",
        "tableName": "category",
        "columns": {
          "category_id": {
            "name": "category_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " A surrogate primary key used to uniquely identify each category in the table."
          },
          "last_update": {
            "name": "last_update",
            "type": {
              "scalarType": "timestamp"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " When the row was created or most recently updated."
          },
          "name": {
            "name": "name",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nonNullable",
            "description": " The name of the category."
          }
        },
        "uniquenessConstraints": {
          "category_pkey": [
            "category_id"
          ]
        },
        "foreignRelations": {},
        "description": "The category table lists the categories that can be assigned to a film.\n\nThe category table is joined to the film table by means of the film_category table."
      },
      "city": {
        "schemaName": "public",
        "tableName": "city",
        "columns": {
          "city": {
            "name": "city",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nonNullable",
            "description": " The name of the city."
          },
          "city_id": {
            "name": "city_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " A surrogate primary key used to uniquely identify each city in the table."
          },
          "country_id": {
            "name": "country_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": " A foreign key identifying the country that the city belongs to."
          },
          "last_update": {
            "name": "last_update",
            "type": {
              "scalarType": "timestamp"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " When the row was created or most recently updated."
          }
        },
        "uniquenessConstraints": {
          "city_pkey": [
            "city_id"
          ]
        },
        "foreignRelations": {
          "city_country_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "country",
            "columnMapping": {
              "country_id": "country_id"
            }
          }
        },
        "description": "The city table contains a list of cities.\n\nThe city table is referred to by a foreign key in the address table and refers to the country table using a foreign key."
      },
      "country": {
        "schemaName": "public",
        "tableName": "country",
        "columns": {
          "country": {
            "name": "country",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nonNullable",
            "description": " The name of the country."
          },
          "country_id": {
            "name": "country_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " A surrogate primary key used to uniquely identify each country in the table."
          },
          "last_update": {
            "name": "last_update",
            "type": {
              "scalarType": "timestamp"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " When the row was created or most recently updated."
          }
        },
        "uniquenessConstraints": {
          "country_pkey": [
            "country_id"
          ]
        },
        "foreignRelations": {},
        "description": "The country table contains a list of countries.\n\nThe country table is referred to by a foreign key in the city table."
      },
      "customer": {
        "schemaName": "public",
        "tableName": "customer",
        "columns": {
          "active": {
            "name": "active",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nullable",
            "description": " Indicates whether the customer is an active customer. Setting this to FALSE serves as an alternative to deleting a customer outright. Most queries should have a WHERE active = TRUE clause."
          },
          "activebool": {
            "name": "activebool",
            "type": {
              "scalarType": "bool"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": null
          },
          "address_id": {
            "name": "address_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": " A foreign key identifying the customer address in the address table."
          },
          "create_date": {
            "name": "create_date",
            "type": {
              "scalarType": "date"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " The date the customer was added to the system. This date is automatically set using a trigger during an INSERT."
          },
          "customer_id": {
            "name": "customer_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " A surrogate primary key used to uniquely identify each customer in the table."
          },
          "email": {
            "name": "email",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nullable",
            "description": " The customer email address."
          },
          "first_name": {
            "name": "first_name",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nonNullable",
            "description": " The customer first name."
          },
          "last_name": {
            "name": "last_name",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nonNullable",
            "description": " The customer last name."
          },
          "last_update": {
            "name": "last_update",
            "type": {
              "scalarType": "timestamp"
            },
            "nullable": "nullable",
            "hasDefault": "hasDefault",
            "description": " When the row was created or most recently updated."
          },
          "store_id": {
            "name": "store_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": " A foreign key identifying the customer “home store.” Customers are not limited to renting only from this store, but this is the store at which they generally shop."
          }
        },
        "uniquenessConstraints": {
          "customer_pkey": [
            "customer_id"
          ]
        },
        "foreignRelations": {
          "customer_address_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "address",
            "columnMapping": {
              "address_id": "address_id"
            }
          },
          "customer_store_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "store",
            "columnMapping": {
              "store_id": "store_id"
            }
          }
        },
        "description": "The customer table contains a list of all customers.\n\nThe customer table is referred to in the payment and rental tables and refers to the address and store tables using foreign keys."
      },
      "customer_list": {
        "schemaName": "public",
        "tableName": "customer_list",
        "columns": {
          "address": {
            "name": "address",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nullable",
            "description": null
          },
          "city": {
            "name": "city",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nullable",
            "description": null
          },
          "country": {
            "name": "country",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nullable",
            "description": null
          },
          "id": {
            "name": "id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nullable",
            "description": null
          },
          "name": {
            "name": "name",
            "type": {
              "scalarType": "text"
            },
            "nullable": "nullable",
            "description": null
          },
          "notes": {
            "name": "notes",
            "type": {
              "scalarType": "text"
            },
            "nullable": "nullable",
            "description": null
          },
          "phone": {
            "name": "phone",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nullable",
            "description": null
          },
          "sid": {
            "name": "sid",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nullable",
            "description": null
          },
          "zip code": {
            "name": "zip code",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nullable",
            "description": null
          }
        },
        "uniquenessConstraints": {},
        "foreignRelations": {},
        "description": null
      },
      "film": {
        "schemaName": "public",
        "tableName": "film",
        "columns": {
          "description": {
            "name": "description",
            "type": {
              "scalarType": "text"
            },
            "nullable": "nullable",
            "description": " A short description or plot summary of the film."
          },
          "film_id": {
            "name": "film_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " A surrogate primary key used to uniquely identify each film in the table."
          },
          "fulltext": {
            "name": "fulltext",
            "type": {
              "scalarType": "tsvector"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "language_id": {
            "name": "language_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": " A foreign key pointing at the language table; identifies the language of the film."
          },
          "last_update": {
            "name": "last_update",
            "type": {
              "scalarType": "timestamp"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " When the row was created or most recently updated."
          },
          "length": {
            "name": "length",
            "type": {
              "scalarType": "int2"
            },
            "nullable": "nullable",
            "description": " The duration of the film, in minutes."
          },
          "original_language_id": {
            "name": "original_language_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nullable",
            "description": " A foreign key pointing at the language table; identifies the original language of the film. Used when a film has been dubbed into a new language."
          },
          "rating": {
            "name": "rating",
            "type": {
              "scalarType": "mpaa_rating"
            },
            "nullable": "nullable",
            "hasDefault": "hasDefault",
            "description": " The rating assigned to the film. Can be one of: G, PG, PG-13, R, or NC-17."
          },
          "release_year": {
            "name": "release_year",
            "type": {
              "scalarType": "year"
            },
            "nullable": "nullable",
            "description": " The year in which the movie was released."
          },
          "rental_duration": {
            "name": "rental_duration",
            "type": {
              "scalarType": "int2"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " The length of the rental period, in days."
          },
          "rental_rate": {
            "name": "rental_rate",
            "type": {
              "scalarType": "numeric"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " The cost to rent the film for the period specified in the rental_duration column."
          },
          "replacement_cost": {
            "name": "replacement_cost",
            "type": {
              "scalarType": "numeric"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " The amount charged to the customer if the film is not returned or is returned in a damaged state."
          },
          "special_features": {
            "name": "special_features",
            "type": {
              "arrayType": {
                "scalarType": "text"
              }
            },
            "nullable": "nullable",
            "description": " Lists which common special features are included on the DVD. Can be zero or more of: Trailers, Commentaries, Deleted Scenes, Behind the Scenes."
          },
          "title": {
            "name": "title",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nonNullable",
            "description": " The title of the film."
          }
        },
        "uniquenessConstraints": {
          "film_pkey": [
            "film_id"
          ]
        },
        "foreignRelations": {
          "film_language_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "language",
            "columnMapping": {
              "language_id": "language_id"
            }
          },
          "film_original_language_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "language",
            "columnMapping": {
              "original_language_id": "language_id"
            }
          }
        },
        "description": "The film table is a list of all films potentially in stock in the stores. The actual in-stock copies of each film are represented in the inventory table.\n\nThe film table refers to the language table and is referred to by the film_category, film_actor, and inventory tables."
      },
      "film_actor": {
        "schemaName": "public",
        "tableName": "film_actor",
        "columns": {
          "actor_id": {
            "name": "actor_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": " A foreign key identifying the actor."
          },
          "film_id": {
            "name": "film_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": " A foreign key identifying the film."
          },
          "last_update": {
            "name": "last_update",
            "type": {
              "scalarType": "timestamp"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " When the row was created or most recently updated."
          }
        },
        "uniquenessConstraints": {
          "film_actor_pkey": [
            "actor_id",
            "film_id"
          ]
        },
        "foreignRelations": {
          "film_actor_actor_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "actor",
            "columnMapping": {
              "actor_id": "actor_id"
            }
          },
          "film_actor_film_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "film",
            "columnMapping": {
              "film_id": "film_id"
            }
          }
        },
        "description": "The film_actor table is used to support a many-to-many relationship between films and actors. For each actor in a given film, there will be one row in the film_actor table listing the actor and film.\n\nThe film_actor table refers to the film and actor tables using foreign keys."
      },
      "film_category": {
        "schemaName": "public",
        "tableName": "film_category",
        "columns": {
          "category_id": {
            "name": "category_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": " A foreign key identifying the category."
          },
          "film_id": {
            "name": "film_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": " A foreign key identifying the film."
          },
          "last_update": {
            "name": "last_update",
            "type": {
              "scalarType": "timestamp"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " When the row was created or most recently updated."
          }
        },
        "uniquenessConstraints": {
          "film_category_pkey": [
            "category_id",
            "film_id"
          ]
        },
        "foreignRelations": {
          "film_category_category_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "category",
            "columnMapping": {
              "category_id": "category_id"
            }
          },
          "film_category_film_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "film",
            "columnMapping": {
              "film_id": "film_id"
            }
          }
        },
        "description": "The film_category table is used to support a many-to-many relationship between films and categories. For each category applied to a film, there will be one row in the film_category table listing the category and film.\n\nThe film_category table refers to the film and category tables using foreign keys."
      },
      "film_list": {
        "schemaName": "public",
        "tableName": "film_list",
        "columns": {
          "actors": {
            "name": "actors",
            "type": {
              "scalarType": "text"
            },
            "nullable": "nullable",
            "description": null
          },
          "category": {
            "name": "category",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nullable",
            "description": null
          },
          "description": {
            "name": "description",
            "type": {
              "scalarType": "text"
            },
            "nullable": "nullable",
            "description": null
          },
          "fid": {
            "name": "fid",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nullable",
            "description": null
          },
          "length": {
            "name": "length",
            "type": {
              "scalarType": "int2"
            },
            "nullable": "nullable",
            "description": null
          },
          "price": {
            "name": "price",
            "type": {
              "scalarType": "numeric"
            },
            "nullable": "nullable",
            "description": null
          },
          "rating": {
            "name": "rating",
            "type": {
              "scalarType": "mpaa_rating"
            },
            "nullable": "nullable",
            "description": null
          },
          "title": {
            "name": "title",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nullable",
            "description": null
          }
        },
        "uniquenessConstraints": {},
        "foreignRelations": {},
        "description": null
      },
      "inventory": {
        "schemaName": "public",
        "tableName": "inventory",
        "columns": {
          "film_id": {
            "name": "film_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": " A foreign key pointing to the film this item represents."
          },
          "inventory_id": {
            "name": "inventory_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " A surrogate primary key used to uniquely identify each item in inventory."
          },
          "last_update": {
            "name": "last_update",
            "type": {
              "scalarType": "timestamp"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " When the row was created or most recently updated."
          },
          "store_id": {
            "name": "store_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": " A foreign key pointing to the store stocking this item."
          }
        },
        "uniquenessConstraints": {
          "inventory_pkey": [
            "inventory_id"
          ]
        },
        "foreignRelations": {
          "inventory_film_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "film",
            "columnMapping": {
              "film_id": "film_id"
            }
          },
          "inventory_store_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "store",
            "columnMapping": {
              "store_id": "store_id"
            }
          }
        },
        "description": "The inventory table contains one row for each copy of a given film in a given store.\n\nThe inventory table refers to the film and store tables using foreign keys and is referred to by the rental table."
      },
      "language": {
        "schemaName": "public",
        "tableName": "language",
        "columns": {
          "language_id": {
            "name": "language_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " A surrogate primary key used to uniquely identify each language."
          },
          "last_update": {
            "name": "last_update",
            "type": {
              "scalarType": "timestamp"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " When the row was created or most recently updated."
          },
          "name": {
            "name": "name",
            "type": {
              "scalarType": "bpchar"
            },
            "nullable": "nonNullable",
            "description": " The English name of the language."
          }
        },
        "uniquenessConstraints": {
          "language_pkey": [
            "language_id"
          ]
        },
        "foreignRelations": {},
        "description": "The language table is a lookup table listing the possible languages that films can have for their language and original language values.\n\nThe language table is referred to by the film table."
      },
      "nicer_but_slower_film_list": {
        "schemaName": "public",
        "tableName": "nicer_but_slower_film_list",
        "columns": {
          "actors": {
            "name": "actors",
            "type": {
              "scalarType": "text"
            },
            "nullable": "nullable",
            "description": null
          },
          "category": {
            "name": "category",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nullable",
            "description": null
          },
          "description": {
            "name": "description",
            "type": {
              "scalarType": "text"
            },
            "nullable": "nullable",
            "description": null
          },
          "fid": {
            "name": "fid",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nullable",
            "description": null
          },
          "length": {
            "name": "length",
            "type": {
              "scalarType": "int2"
            },
            "nullable": "nullable",
            "description": null
          },
          "price": {
            "name": "price",
            "type": {
              "scalarType": "numeric"
            },
            "nullable": "nullable",
            "description": null
          },
          "rating": {
            "name": "rating",
            "type": {
              "scalarType": "mpaa_rating"
            },
            "nullable": "nullable",
            "description": null
          },
          "title": {
            "name": "title",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nullable",
            "description": null
          }
        },
        "uniquenessConstraints": {},
        "foreignRelations": {},
        "description": null
      },
      "payment": {
        "schemaName": "public",
        "tableName": "payment",
        "columns": {
          "amount": {
            "name": "amount",
            "type": {
              "scalarType": "numeric"
            },
            "nullable": "nonNullable",
            "description": " The amount of the payment."
          },
          "customer_id": {
            "name": "customer_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": " The customer whose balance the payment is being applied to. This is a foreign key reference to the customer table."
          },
          "payment_date": {
            "name": "payment_date",
            "type": {
              "scalarType": "timestamp"
            },
            "nullable": "nonNullable",
            "description": " The date the payment was processed."
          },
          "payment_id": {
            "name": "payment_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " A surrogate primary key used to uniquely identify each payment."
          },
          "rental_id": {
            "name": "rental_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": " The rental that the payment is being applied to. This is optional because some payments are for outstanding fees and may not be directly related to a rental."
          },
          "staff_id": {
            "name": "staff_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": " The staff member who processed the payment. This is a foreign key reference to the staff table."
          }
        },
        "uniquenessConstraints": {
          "payment_pkey": [
            "payment_id"
          ]
        },
        "foreignRelations": {
          "payment_customer_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "customer",
            "columnMapping": {
              "customer_id": "customer_id"
            }
          },
          "payment_rental_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "rental",
            "columnMapping": {
              "rental_id": "rental_id"
            }
          },
          "payment_staff_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "staff",
            "columnMapping": {
              "staff_id": "staff_id"
            }
          }
        },
        "description": "The payment table records each payment made by a customer, with information such as the amount and the rental being paid for (when applicable).\n\nThe payment table refers to the customer, rental, and staff tables."
      },
      "payment_p2007_01": {
        "schemaName": "public",
        "tableName": "payment_p2007_01",
        "columns": {
          "amount": {
            "name": "amount",
            "type": {
              "scalarType": "numeric"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "customer_id": {
            "name": "customer_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "payment_date": {
            "name": "payment_date",
            "type": {
              "scalarType": "timestamp"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "payment_id": {
            "name": "payment_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": null
          },
          "rental_id": {
            "name": "rental_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "staff_id": {
            "name": "staff_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": null
          }
        },
        "uniquenessConstraints": {},
        "foreignRelations": {
          "payment_p2007_01_customer_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "customer",
            "columnMapping": {
              "customer_id": "customer_id"
            }
          },
          "payment_p2007_01_rental_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "rental",
            "columnMapping": {
              "rental_id": "rental_id"
            }
          },
          "payment_p2007_01_staff_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "staff",
            "columnMapping": {
              "staff_id": "staff_id"
            }
          }
        },
        "description": null
      },
      "payment_p2007_02": {
        "schemaName": "public",
        "tableName": "payment_p2007_02",
        "columns": {
          "amount": {
            "name": "amount",
            "type": {
              "scalarType": "numeric"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "customer_id": {
            "name": "customer_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "payment_date": {
            "name": "payment_date",
            "type": {
              "scalarType": "timestamp"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "payment_id": {
            "name": "payment_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": null
          },
          "rental_id": {
            "name": "rental_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "staff_id": {
            "name": "staff_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": null
          }
        },
        "uniquenessConstraints": {},
        "foreignRelations": {
          "payment_p2007_02_customer_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "customer",
            "columnMapping": {
              "customer_id": "customer_id"
            }
          },
          "payment_p2007_02_rental_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "rental",
            "columnMapping": {
              "rental_id": "rental_id"
            }
          },
          "payment_p2007_02_staff_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "staff",
            "columnMapping": {
              "staff_id": "staff_id"
            }
          }
        },
        "description": null
      },
      "payment_p2007_03": {
        "schemaName": "public",
        "tableName": "payment_p2007_03",
        "columns": {
          "amount": {
            "name": "amount",
            "type": {
              "scalarType": "numeric"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "customer_id": {
            "name": "customer_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "payment_date": {
            "name": "payment_date",
            "type": {
              "scalarType": "timestamp"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "payment_id": {
            "name": "payment_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": null
          },
          "rental_id": {
            "name": "rental_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "staff_id": {
            "name": "staff_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": null
          }
        },
        "uniquenessConstraints": {},
        "foreignRelations": {
          "payment_p2007_03_customer_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "customer",
            "columnMapping": {
              "customer_id": "customer_id"
            }
          },
          "payment_p2007_03_rental_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "rental",
            "columnMapping": {
              "rental_id": "rental_id"
            }
          },
          "payment_p2007_03_staff_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "staff",
            "columnMapping": {
              "staff_id": "staff_id"
            }
          }
        },
        "description": null
      },
      "payment_p2007_04": {
        "schemaName": "public",
        "tableName": "payment_p2007_04",
        "columns": {
          "amount": {
            "name": "amount",
            "type": {
              "scalarType": "numeric"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "customer_id": {
            "name": "customer_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "payment_date": {
            "name": "payment_date",
            "type": {
              "scalarType": "timestamp"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "payment_id": {
            "name": "payment_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": null
          },
          "rental_id": {
            "name": "rental_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "staff_id": {
            "name": "staff_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": null
          }
        },
        "uniquenessConstraints": {},
        "foreignRelations": {
          "payment_p2007_04_customer_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "customer",
            "columnMapping": {
              "customer_id": "customer_id"
            }
          },
          "payment_p2007_04_rental_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "rental",
            "columnMapping": {
              "rental_id": "rental_id"
            }
          },
          "payment_p2007_04_staff_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "staff",
            "columnMapping": {
              "staff_id": "staff_id"
            }
          }
        },
        "description": null
      },
      "payment_p2007_05": {
        "schemaName": "public",
        "tableName": "payment_p2007_05",
        "columns": {
          "amount": {
            "name": "amount",
            "type": {
              "scalarType": "numeric"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "customer_id": {
            "name": "customer_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "payment_date": {
            "name": "payment_date",
            "type": {
              "scalarType": "timestamp"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "payment_id": {
            "name": "payment_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": null
          },
          "rental_id": {
            "name": "rental_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "staff_id": {
            "name": "staff_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": null
          }
        },
        "uniquenessConstraints": {},
        "foreignRelations": {
          "payment_p2007_05_customer_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "customer",
            "columnMapping": {
              "customer_id": "customer_id"
            }
          },
          "payment_p2007_05_rental_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "rental",
            "columnMapping": {
              "rental_id": "rental_id"
            }
          },
          "payment_p2007_05_staff_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "staff",
            "columnMapping": {
              "staff_id": "staff_id"
            }
          }
        },
        "description": null
      },
      "payment_p2007_06": {
        "schemaName": "public",
        "tableName": "payment_p2007_06",
        "columns": {
          "amount": {
            "name": "amount",
            "type": {
              "scalarType": "numeric"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "customer_id": {
            "name": "customer_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "payment_date": {
            "name": "payment_date",
            "type": {
              "scalarType": "timestamp"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "payment_id": {
            "name": "payment_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": null
          },
          "rental_id": {
            "name": "rental_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": null
          },
          "staff_id": {
            "name": "staff_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": null
          }
        },
        "uniquenessConstraints": {},
        "foreignRelations": {
          "payment_p2007_06_customer_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "customer",
            "columnMapping": {
              "customer_id": "customer_id"
            }
          },
          "payment_p2007_06_rental_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "rental",
            "columnMapping": {
              "rental_id": "rental_id"
            }
          },
          "payment_p2007_06_staff_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "staff",
            "columnMapping": {
              "staff_id": "staff_id"
            }
          }
        },
        "description": null
      },
      "rental": {
        "schemaName": "public",
        "tableName": "rental",
        "columns": {
          "customer_id": {
            "name": "customer_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": " The customer renting the item."
          },
          "inventory_id": {
            "name": "inventory_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": " The item being rented."
          },
          "last_update": {
            "name": "last_update",
            "type": {
              "scalarType": "timestamp"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " When the row was created or most recently updated."
          },
          "rental_date": {
            "name": "rental_date",
            "type": {
              "scalarType": "timestamp"
            },
            "nullable": "nonNullable",
            "description": " The date and time that the item was rented."
          },
          "rental_id": {
            "name": "rental_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " A surrogate primary key that uniquely identifies the rental."
          },
          "return_date": {
            "name": "return_date",
            "type": {
              "scalarType": "timestamp"
            },
            "nullable": "nullable",
            "description": " The date and time the item was returned."
          },
          "staff_id": {
            "name": "staff_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": " The staff member who processed the rental."
          }
        },
        "uniquenessConstraints": {
          "rental_pkey": [
            "rental_id"
          ]
        },
        "foreignRelations": {
          "rental_customer_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "customer",
            "columnMapping": {
              "customer_id": "customer_id"
            }
          },
          "rental_inventory_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "inventory",
            "columnMapping": {
              "inventory_id": "inventory_id"
            }
          },
          "rental_staff_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "staff",
            "columnMapping": {
              "staff_id": "staff_id"
            }
          }
        },
        "description": "The rental table contains one row for each rental of each inventory item with information about who rented what item, when it was rented, and when it was returned.\n\nThe rental table refers to the inventory, customer, and staff tables and is referred to by the payment table."
      },
      "sales_by_film_category": {
        "schemaName": "public",
        "tableName": "sales_by_film_category",
        "columns": {
          "category": {
            "name": "category",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nullable",
            "description": null
          },
          "total_sales": {
            "name": "total_sales",
            "type": {
              "scalarType": "numeric"
            },
            "nullable": "nullable",
            "description": null
          }
        },
        "uniquenessConstraints": {},
        "foreignRelations": {},
        "description": null
      },
      "sales_by_store": {
        "schemaName": "public",
        "tableName": "sales_by_store",
        "columns": {
          "manager": {
            "name": "manager",
            "type": {
              "scalarType": "text"
            },
            "nullable": "nullable",
            "description": null
          },
          "store": {
            "name": "store",
            "type": {
              "scalarType": "text"
            },
            "nullable": "nullable",
            "description": null
          },
          "total_sales": {
            "name": "total_sales",
            "type": {
              "scalarType": "numeric"
            },
            "nullable": "nullable",
            "description": null
          }
        },
        "uniquenessConstraints": {},
        "foreignRelations": {},
        "description": null
      },
      "staff": {
        "schemaName": "public",
        "tableName": "staff",
        "columns": {
          "active": {
            "name": "active",
            "type": {
              "scalarType": "bool"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " Whether this is an active employee. If employees leave, their rows are not deleted from this table; instead, this column is set to FALSE."
          },
          "address_id": {
            "name": "address_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": " A foreign key to the staff member address in the address table."
          },
          "email": {
            "name": "email",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nullable",
            "description": " The staff member email address."
          },
          "first_name": {
            "name": "first_name",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nonNullable",
            "description": " The first name of the staff member."
          },
          "last_name": {
            "name": "last_name",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nonNullable",
            "description": " The last name of the staff member."
          },
          "last_update": {
            "name": "last_update",
            "type": {
              "scalarType": "timestamp"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " When the row was created or most recently updated."
          },
          "password": {
            "name": "password",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nullable",
            "description": " The password used by the staff member to access the rental system. The password should be stored as a hash using the SHA2() function."
          },
          "picture": {
            "name": "picture",
            "type": {
              "scalarType": "bytea"
            },
            "nullable": "nullable",
            "description": " A BLOB containing a photograph of the employee."
          },
          "staff_id": {
            "name": "staff_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " A surrogate primary key that uniquely identifies the staff member."
          },
          "store_id": {
            "name": "store_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": " The staff member “home store.” The employee can work at other stores but is generally assigned to the store listed."
          },
          "username": {
            "name": "username",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nonNullable",
            "description": " The user name used by the staff member to access the rental system."
          }
        },
        "uniquenessConstraints": {
          "staff_pkey": [
            "staff_id"
          ]
        },
        "foreignRelations": {
          "staff_address_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "address",
            "columnMapping": {
              "address_id": "address_id"
            }
          },
          "staff_store_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "store",
            "columnMapping": {
              "store_id": "store_id"
            }
          }
        },
        "description": "The staff table lists all staff members, including information for email address, login information, and picture.\n\nThe staff table refers to the store and address tables using foreign keys, and is referred to by the rental, payment, and store tables."
      },
      "staff_list": {
        "schemaName": "public",
        "tableName": "staff_list",
        "columns": {
          "address": {
            "name": "address",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nullable",
            "description": null
          },
          "city": {
            "name": "city",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nullable",
            "description": null
          },
          "country": {
            "name": "country",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nullable",
            "description": null
          },
          "id": {
            "name": "id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nullable",
            "description": null
          },
          "name": {
            "name": "name",
            "type": {
              "scalarType": "text"
            },
            "nullable": "nullable",
            "description": null
          },
          "phone": {
            "name": "phone",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nullable",
            "description": null
          },
          "sid": {
            "name": "sid",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nullable",
            "description": null
          },
          "zip code": {
            "name": "zip code",
            "type": {
              "scalarType": "varchar"
            },
            "nullable": "nullable",
            "description": null
          }
        },
        "uniquenessConstraints": {},
        "foreignRelations": {},
        "description": null
      },
      "store": {
        "schemaName": "public",
        "tableName": "store",
        "columns": {
          "address_id": {
            "name": "address_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": " A foreign key identifying the address of this store."
          },
          "last_update": {
            "name": "last_update",
            "type": {
              "scalarType": "timestamp"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " When the row was created or most recently updated."
          },
          "manager_staff_id": {
            "name": "manager_staff_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": " A foreign key identifying the manager of this store."
          },
          "store_id": {
            "name": "store_id",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "hasDefault": "hasDefault",
            "description": " A surrogate primary key that uniquely identifies the store."
          }
        },
        "uniquenessConstraints": {
          "store_pkey": [
            "store_id"
          ]
        },
        "foreignRelations": {
          "store_address_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "address",
            "columnMapping": {
              "address_id": "address_id"
            }
          },
          "store_manager_staff_id_fkey": {
            "foreignSchema": "public",
            "foreignTable": "staff",
            "columnMapping": {
              "manager_staff_id": "staff_id"
            }
          }
        },
        "description": "The store table lists all stores in the system. All inventory is assigned to specific stores, and staff and customers are assigned a “home store”.\n\nThe store table refers to the staff and address tables using foreign keys and is referred to by the staff, customer, and inventory tables."
      }
    },
    "types": {
      "scalar": {
        "bool": {
          "typeName": "bool",
          "schemaName": "pg_catalog",
          "description": null,
          "aggregateFunctions": {
            "bool_and": {
              "returnType": "bool"
            },
            "bool_or": {
              "returnType": "bool"
            },
            "every": {
              "returnType": "bool"
            }
          },
          "comparisonOperators": {
            "_eq": {
              "operatorName": "=",
              "operatorKind": "equal",
              "argumentType": "bool",
              "isInfix": true
            },
            "_gt": {
              "operatorName": ">",
              "operatorKind": "custom",
              "argumentType": "bool",
              "isInfix": true
            },
            "_gte": {
              "operatorName": ">=",
              "operatorKind": "custom",
              "argumentType": "bool",
              "isInfix": true
            },
            "_in": {
              "operatorName": "IN",
              "operatorKind": "in",
              "argumentType": "bool",
              "isInfix": true
            },
            "_lt": {
              "operatorName": "<",
              "operatorKind": "custom",
              "argumentType": "bool",
              "isInfix": true
            },
            "_lte": {
              "operatorName": "<=",
              "operatorKind": "custom",
              "argumentType": "bool",
              "isInfix": true
            },
            "_neq": {
              "operatorName": "<>",
              "operatorKind": "custom",
              "argumentType": "bool",
              "isInfix": true
            }
          },
          "typeRepresentation": "boolean"
        },
        "bpchar": {
          "typeName": "bpchar",
          "schemaName": "pg_catalog",
          "description": null,
          "aggregateFunctions": {
            "group_concat": {
              "returnType": "text"
            },
            "max": {
              "returnType": "bpchar"
            },
            "min": {
              "returnType": "bpchar"
            }
          },
          "comparisonOperators": {
            "_eq": {
              "operatorName": "=",
              "operatorKind": "equal",
              "argumentType": "bpchar",
              "isInfix": true
            },
            "_gt": {
              "operatorName": ">",
              "operatorKind": "custom",
              "argumentType": "bpchar",
              "isInfix": true
            },
            "_gte": {
              "operatorName": ">=",
              "operatorKind": "custom",
              "argumentType": "bpchar",
              "isInfix": true
            },
            "_ilike": {
              "operatorName": "~~*",
              "operatorKind": "custom",
              "argumentType": "text",
              "isInfix": true
            },
            "_in": {
              "operatorName": "IN",
              "operatorKind": "in",
              "argumentType": "bpchar",
              "isInfix": true
            },
            "_iregex": {
              "operatorName": "~*",
              "operatorKind": "custom",
              "argumentType": "text",
              "isInfix": true
            },
            "_like": {
              "operatorName": "~~",
              "operatorKind": "custom",
              "argumentType": "text",
              "isInfix": true
            },
            "_lt": {
              "operatorName": "<",
              "operatorKind": "custom",
              "argumentType": "bpchar",
              "isInfix": true
            },
            "_lte": {
              "operatorName": "<=",
              "operatorKind": "custom",
              "argumentType": "bpchar",
              "isInfix": true
            },
            "_neq": {
              "operatorName": "<>",
              "operatorKind": "custom",
              "argumentType": "bpchar",
              "isInfix": true
            },
            "_nilike": {
              "operatorName": "!~~*",
              "operatorKind": "custom",
              "argumentType": "text",
              "isInfix": true
            },
            "_niregex": {
              "operatorName": "!~*",
              "operatorKind": "custom",
              "argumentType": "text",
              "isInfix": true
            },
            "_nlike": {
              "operatorName": "!~~",
              "operatorKind": "custom",
              "argumentType": "text",
              "isInfix": true
            },
            "_nregex": {
              "operatorName": "!~",
              "operatorKind": "custom",
              "argumentType": "text",
              "isInfix": true
            },
            "_regex": {
              "operatorName": "~",
              "operatorKind": "custom",
              "argumentType": "text",
              "isInfix": true
            },
            "starts_with": {
              "operatorName": "starts_with",
              "operatorKind": "custom",
              "argumentType": "bpchar",
              "isInfix": false
            },
            "ts_match_tt": {
              "operatorName": "ts_match_tt",
              "operatorKind": "custom",
              "argumentType": "bpchar",
              "isInfix": false
            }
          },
          "typeRepresentation": "string"
        },
        "bytea": {
          "typeName": "bytea",
          "schemaName": "pg_catalog",
          "description": null,
          "aggregateFunctions": {},
          "comparisonOperators": {
            "_eq": {
              "operatorName": "=",
              "operatorKind": "equal",
              "argumentType": "bytea",
              "isInfix": true
            },
            "_gt": {
              "operatorName": ">",
              "operatorKind": "custom",
              "argumentType": "bytea",
              "isInfix": true
            },
            "_gte": {
              "operatorName": ">=",
              "operatorKind": "custom",
              "argumentType": "bytea",
              "isInfix": true
            },
            "_in": {
              "operatorName": "IN",
              "operatorKind": "in",
              "argumentType": "bytea",
              "isInfix": true
            },
            "_like": {
              "operatorName": "~~",
              "operatorKind": "custom",
              "argumentType": "bytea",
              "isInfix": true
            },
            "_lt": {
              "operatorName": "<",
              "operatorKind": "custom",
              "argumentType": "bytea",
              "isInfix": true
            },
            "_lte": {
              "operatorName": "<=",
              "operatorKind": "custom",
              "argumentType": "bytea",
              "isInfix": true
            },
            "_neq": {
              "operatorName": "<>",
              "operatorKind": "custom",
              "argumentType": "bytea",
              "isInfix": true
            },
            "_nlike": {
              "operatorName": "!~~",
              "operatorKind": "custom",
              "argumentType": "bytea",
              "isInfix": true
            }
          },
          "typeRepresentation": null
        },
        "date": {
          "typeName": "date",
          "schemaName": "pg_catalog",
          "description": null,
          "aggregateFunctions": {
            "max": {
              "returnType": "date"
            },
            "min": {
              "returnType": "date"
            }
          },
          "comparisonOperators": {
            "_eq": {
              "operatorName": "=",
              "operatorKind": "equal",
              "argumentType": "date",
              "isInfix": true
            },
            "_gt": {
              "operatorName": ">",
              "operatorKind": "custom",
              "argumentType": "date",
              "isInfix": true
            },
            "_gte": {
              "operatorName": ">=",
              "operatorKind": "custom",
              "argumentType": "date",
              "isInfix": true
            },
            "_in": {
              "operatorName": "IN",
              "operatorKind": "in",
              "argumentType": "date",
              "isInfix": true
            },
            "_lt": {
              "operatorName": "<",
              "operatorKind": "custom",
              "argumentType": "date",
              "isInfix": true
            },
            "_lte": {
              "operatorName": "<=",
              "operatorKind": "custom",
              "argumentType": "date",
              "isInfix": true
            },
            "_neq": {
              "operatorName": "<>",
              "operatorKind": "custom",
              "argumentType": "date",
              "isInfix": true
            }
          },
          "typeRepresentation": "date"
        },
        "int2": {
          "typeName": "int2",
          "schemaName": "pg_catalog",
          "description": null,
          "aggregateFunctions": {
            "avg": {
              "returnType": "numeric"
            },
            "bit_and": {
              "returnType": "int2"
            },
            "bit_or": {
              "returnType": "int2"
            },
            "bit_xor": {
              "returnType": "int2"
            },
            "max": {
              "returnType": "int2"
            },
            "min": {
              "returnType": "int2"
            },
            "stddev": {
              "returnType": "numeric"
            },
            "stddev_pop": {
              "returnType": "numeric"
            },
            "stddev_samp": {
              "returnType": "numeric"
            },
            "sum": {
              "returnType": "int8"
            },
            "var_pop": {
              "returnType": "numeric"
            },
            "var_samp": {
              "returnType": "numeric"
            },
            "variance": {
              "returnType": "numeric"
            }
          },
          "comparisonOperators": {
            "_eq": {
              "operatorName": "=",
              "operatorKind": "equal",
              "argumentType": "int2",
              "isInfix": true
            },
            "_gt": {
              "operatorName": ">",
              "operatorKind": "custom",
              "argumentType": "int2",
              "isInfix": true
            },
            "_gte": {
              "operatorName": ">=",
              "operatorKind": "custom",
              "argumentType": "int2",
              "isInfix": true
            },
            "_in": {
              "operatorName": "IN",
              "operatorKind": "in",
              "argumentType": "int2",
              "isInfix": true
            },
            "_lt": {
              "operatorName": "<",
              "operatorKind": "custom",
              "argumentType": "int2",
              "isInfix": true
            },
            "_lte": {
              "operatorName": "<=",
              "operatorKind": "custom",
              "argumentType": "int2",
              "isInfix": true
            },
            "_neq": {
              "operatorName": "<>",
              "operatorKind": "custom",
              "argumentType": "int2",
              "isInfix": true
            }
          },
          "typeRepresentation": "int16"
        },
        "int4": {
          "typeName": "int4",
          "schemaName": "pg_catalog",
          "description": null,
          "aggregateFunctions": {
            "avg": {
              "returnType": "numeric"
            },
            "bit_and": {
              "returnType": "int4"
            },
            "bit_or": {
              "returnType": "int4"
            },
            "bit_xor": {
              "returnType": "int4"
            },
            "max": {
              "returnType": "int4"
            },
            "min": {
              "returnType": "int4"
            },
            "stddev": {
              "returnType": "numeric"
            },
            "stddev_pop": {
              "returnType": "numeric"
            },
            "stddev_samp": {
              "returnType": "numeric"
            },
            "sum": {
              "returnType": "int8"
            },
            "var_pop": {
              "returnType": "numeric"
            },
            "var_samp": {
              "returnType": "numeric"
            },
            "variance": {
              "returnType": "numeric"
            }
          },
          "comparisonOperators": {
            "_eq": {
              "operatorName": "=",
              "operatorKind": "equal",
              "argumentType": "int4",
              "isInfix": true
            },
            "_gt": {
              "operatorName": ">",
              "operatorKind": "custom",
              "argumentType": "int4",
              "isInfix": true
            },
            "_gte": {
              "operatorName": ">=",
              "operatorKind": "custom",
              "argumentType": "int4",
              "isInfix": true
            },
            "_in": {
              "operatorName": "IN",
              "operatorKind": "in",
              "argumentType": "int4",
              "isInfix": true
            },
            "_lt": {
              "operatorName": "<",
              "operatorKind": "custom",
              "argumentType": "int4",
              "isInfix": true
            },
            "_lte": {
              "operatorName": "<=",
              "operatorKind": "custom",
              "argumentType": "int4",
              "isInfix": true
            },
            "_neq": {
              "operatorName": "<>",
              "operatorKind": "custom",
              "argumentType": "int4",
              "isInfix": true
            }
          },
          "typeRepresentation": "int32"
        },
        "int8": {
          "typeName": "int8",
          "schemaName": "pg_catalog",
          "description": null,
          "aggregateFunctions": {
            "avg": {
              "returnType": "numeric"
            },
            "bit_and": {
              "returnType": "int8"
            },
            "bit_or": {
              "returnType": "int8"
            },
            "bit_xor": {
              "returnType": "int8"
            },
            "max": {
              "returnType": "int8"
            },
            "min": {
              "returnType": "int8"
            },
            "stddev": {
              "returnType": "numeric"
            },
            "stddev_pop": {
              "returnType": "numeric"
            },
            "stddev_samp": {
              "returnType": "numeric"
            },
            "sum": {
              "returnType": "numeric"
            },
            "var_pop": {
              "returnType": "numeric"
            },
            "var_samp": {
              "returnType": "numeric"
            },
            "variance": {
              "returnType": "numeric"
            }
          },
          "comparisonOperators": {
            "_eq": {
              "operatorName": "=",
              "operatorKind": "equal",
              "argumentType": "int8",
              "isInfix": true
            },
            "_gt": {
              "operatorName": ">",
              "operatorKind": "custom",
              "argumentType": "int8",
              "isInfix": true
            },
            "_gte": {
              "operatorName": ">=",
              "operatorKind": "custom",
              "argumentType": "int8",
              "isInfix": true
            },
            "_in": {
              "operatorName": "IN",
              "operatorKind": "in",
              "argumentType": "int8",
              "isInfix": true
            },
            "_lt": {
              "operatorName": "<",
              "operatorKind": "custom",
              "argumentType": "int8",
              "isInfix": true
            },
            "_lte": {
              "operatorName": "<=",
              "operatorKind": "custom",
              "argumentType": "int8",
              "isInfix": true
            },
            "_neq": {
              "operatorName": "<>",
              "operatorKind": "custom",
              "argumentType": "int8",
              "isInfix": true
            }
          },
          "typeRepresentation": "int64AsString"
        },
        "mpaa_rating": {
          "typeName": "mpaa_rating",
          "schemaName": "public",
          "description": null,
          "aggregateFunctions": {
            "max": {
              "returnType": "mpaa_rating"
            },
            "min": {
              "returnType": "mpaa_rating"
            }
          },
          "comparisonOperators": {
            "_eq": {
              "operatorName": "=",
              "operatorKind": "equal",
              "argumentType": "mpaa_rating",
              "isInfix": true
            },
            "_gt": {
              "operatorName": ">",
              "operatorKind": "custom",
              "argumentType": "mpaa_rating",
              "isInfix": true
            },
            "_gte": {
              "operatorName": ">=",
              "operatorKind": "custom",
              "argumentType": "mpaa_rating",
              "isInfix": true
            },
            "_in": {
              "operatorName": "IN",
              "operatorKind": "in",
              "argumentType": "mpaa_rating",
              "isInfix": true
            },
            "_lt": {
              "operatorName": "<",
              "operatorKind": "custom",
              "argumentType": "mpaa_rating",
              "isInfix": true
            },
            "_lte": {
              "operatorName": "<=",
              "operatorKind": "custom",
              "argumentType": "mpaa_rating",
              "isInfix": true
            },
            "_neq": {
              "operatorName": "!=",
              "operatorKind": "custom",
              "argumentType": "mpaa_rating",
              "isInfix": true
            }
          },
          "typeRepresentation": {
            "enum": [
              "G",
              "PG",
              "PG-13",
              "R",
              "NC-17"
            ]
          }
        },
        "numeric": {
          "typeName": "numeric",
          "schemaName": "pg_catalog",
          "description": null,
          "aggregateFunctions": {
            "avg": {
              "returnType": "numeric"
            },
            "max": {
              "returnType": "numeric"
            },
            "min": {
              "returnType": "numeric"
            },
            "stddev": {
              "returnType": "numeric"
            },
            "stddev_pop": {
              "returnType": "numeric"
            },
            "stddev_samp": {
              "returnType": "numeric"
            },
            "sum": {
              "returnType": "numeric"
            },
            "var_pop": {
              "returnType": "numeric"
            },
            "var_samp": {
              "returnType": "numeric"
            },
            "variance": {
              "returnType": "numeric"
            }
          },
          "comparisonOperators": {
            "_eq": {
              "operatorName": "=",
              "operatorKind": "equal",
              "argumentType": "numeric",
              "isInfix": true
            },
            "_gt": {
              "operatorName": ">",
              "operatorKind": "custom",
              "argumentType": "numeric",
              "isInfix": true
            },
            "_gte": {
              "operatorName": ">=",
              "operatorKind": "custom",
              "argumentType": "numeric",
              "isInfix": true
            },
            "_in": {
              "operatorName": "IN",
              "operatorKind": "in",
              "argumentType": "numeric",
              "isInfix": true
            },
            "_lt": {
              "operatorName": "<",
              "operatorKind": "custom",
              "argumentType": "numeric",
              "isInfix": true
            },
            "_lte": {
              "operatorName": "<=",
              "operatorKind": "custom",
              "argumentType": "numeric",
              "isInfix": true
            },
            "_neq": {
              "operatorName": "<>",
              "operatorKind": "custom",
              "argumentType": "numeric",
              "isInfix": true
            }
          },
          "typeRepresentation": "bigDecimalAsString"
        },
        "text": {
          "typeName": "text",
          "schemaName": "pg_catalog",
          "description": null,
          "aggregateFunctions": {
            "group_concat": {
              "returnType": "text"
            },
            "max": {
              "returnType": "text"
            },
            "min": {
              "returnType": "text"
            }
          },
          "comparisonOperators": {
            "_eq": {
              "operatorName": "=",
              "operatorKind": "equal",
              "argumentType": "text",
              "isInfix": true
            },
            "_gt": {
              "operatorName": ">",
              "operatorKind": "custom",
              "argumentType": "text",
              "isInfix": true
            },
            "_gte": {
              "operatorName": ">=",
              "operatorKind": "custom",
              "argumentType": "text",
              "isInfix": true
            },
            "_ilike": {
              "operatorName": "~~*",
              "operatorKind": "custom",
              "argumentType": "text",
              "isInfix": true
            },
            "_in": {
              "operatorName": "IN",
              "operatorKind": "in",
              "argumentType": "text",
              "isInfix": true
            },
            "_iregex": {
              "operatorName": "~*",
              "operatorKind": "custom",
              "argumentType": "text",
              "isInfix": true
            },
            "_like": {
              "operatorName": "~~",
              "operatorKind": "custom",
              "argumentType": "text",
              "isInfix": true
            },
            "_lt": {
              "operatorName": "<",
              "operatorKind": "custom",
              "argumentType": "text",
              "isInfix": true
            },
            "_lte": {
              "operatorName": "<=",
              "operatorKind": "custom",
              "argumentType": "text",
              "isInfix": true
            },
            "_neq": {
              "operatorName": "<>",
              "operatorKind": "custom",
              "argumentType": "text",
              "isInfix": true
            },
            "_nilike": {
              "operatorName": "!~~*",
              "operatorKind": "custom",
              "argumentType": "text",
              "isInfix": true
            },
            "_niregex": {
              "operatorName": "!~*",
              "operatorKind": "custom",
              "argumentType": "text",
              "isInfix": true
            },
            "_nlike": {
              "operatorName": "!~~",
              "operatorKind": "custom",
              "argumentType": "text",
              "isInfix": true
            },
            "_nregex": {
              "operatorName": "!~",
              "operatorKind": "custom",
              "argumentType": "text",
              "isInfix": true
            },
            "_regex": {
              "operatorName": "~",
              "operatorKind": "custom",
              "argumentType": "text",
              "isInfix": true
            },
            "starts_with": {
              "operatorName": "starts_with",
              "operatorKind": "custom",
              "argumentType": "text",
              "isInfix": false
            },
            "ts_match_tt": {
              "operatorName": "ts_match_tt",
              "operatorKind": "custom",
              "argumentType": "text",
              "isInfix": false
            }
          },
          "typeRepresentation": "string"
        },
        "timestamp": {
          "typeName": "timestamp",
          "schemaName": "pg_catalog",
          "description": null,
          "aggregateFunctions": {
            "max": {
              "returnType": "timestamp"
            },
            "min": {
              "returnType": "timestamp"
            }
          },
          "comparisonOperators": {
            "_eq": {
              "operatorName": "=",
              "operatorKind": "equal",
              "argumentType": "timestamp",
              "isInfix": true
            },
            "_gt": {
              "operatorName": ">",
              "operatorKind": "custom",
              "argumentType": "timestamp",
              "isInfix": true
            },
            "_gte": {
              "operatorName": ">=",
              "operatorKind": "custom",
              "argumentType": "timestamp",
              "isInfix": true
            },
            "_in": {
              "operatorName": "IN",
              "operatorKind": "in",
              "argumentType": "timestamp",
              "isInfix": true
            },
            "_lt": {
              "operatorName": "<",
              "operatorKind": "custom",
              "argumentType": "timestamp",
              "isInfix": true
            },
            "_lte": {
              "operatorName": "<=",
              "operatorKind": "custom",
              "argumentType": "timestamp",
              "isInfix": true
            },
            "_neq": {
              "operatorName": "<>",
              "operatorKind": "custom",
              "argumentType": "timestamp",
              "isInfix": true
            }
          },
          "typeRepresentation": "timestamp"
        },
        "tsvector": {
          "typeName": "tsvector",
          "schemaName": "pg_catalog",
          "description": null,
          "aggregateFunctions": {},
          "comparisonOperators": {
            "_eq": {
              "operatorName": "=",
              "operatorKind": "equal",
              "argumentType": "tsvector",
              "isInfix": true
            },
            "_gt": {
              "operatorName": ">",
              "operatorKind": "custom",
              "argumentType": "tsvector",
              "isInfix": true
            },
            "_gte": {
              "operatorName": ">=",
              "operatorKind": "custom",
              "argumentType": "tsvector",
              "isInfix": true
            },
            "_in": {
              "operatorName": "IN",
              "operatorKind": "in",
              "argumentType": "tsvector",
              "isInfix": true
            },
            "_lt": {
              "operatorName": "<",
              "operatorKind": "custom",
              "argumentType": "tsvector",
              "isInfix": true
            },
            "_lte": {
              "operatorName": "<=",
              "operatorKind": "custom",
              "argumentType": "tsvector",
              "isInfix": true
            },
            "_neq": {
              "operatorName": "<>",
              "operatorKind": "custom",
              "argumentType": "tsvector",
              "isInfix": true
            }
          },
          "typeRepresentation": null
        },
        "varchar": {
          "typeName": "varchar",
          "schemaName": "pg_catalog",
          "description": null,
          "aggregateFunctions": {
            "group_concat": {
              "returnType": "text"
            },
            "max": {
              "returnType": "text"
            },
            "min": {
              "returnType": "text"
            }
          },
          "comparisonOperators": {
            "_eq": {
              "operatorName": "=",
              "operatorKind": "equal",
              "argumentType": "varchar",
              "isInfix": true
            },
            "_gt": {
              "operatorName": ">",
              "operatorKind": "custom",
              "argumentType": "varchar",
              "isInfix": true
            },
            "_gte": {
              "operatorName": ">=",
              "operatorKind": "custom",
              "argumentType": "varchar",
              "isInfix": true
            },
            "_ilike": {
              "operatorName": "~~*",
              "operatorKind": "custom",
              "argumentType": "varchar",
              "isInfix": true
            },
            "_in": {
              "operatorName": "IN",
              "operatorKind": "in",
              "argumentType": "varchar",
              "isInfix": true
            },
            "_iregex": {
              "operatorName": "~*",
              "operatorKind": "custom",
              "argumentType": "varchar",
              "isInfix": true
            },
            "_like": {
              "operatorName": "~~",
              "operatorKind": "custom",
              "argumentType": "varchar",
              "isInfix": true
            },
            "_lt": {
              "operatorName": "<",
              "operatorKind": "custom",
              "argumentType": "varchar",
              "isInfix": true
            },
            "_lte": {
              "operatorName": "<=",
              "operatorKind": "custom",
              "argumentType": "varchar",
              "isInfix": true
            },
            "_neq": {
              "operatorName": "<>",
              "operatorKind": "custom",
              "argumentType": "varchar",
              "isInfix": true
            },
            "_nilike": {
              "operatorName": "!~~*",
              "operatorKind": "custom",
              "argumentType": "varchar",
              "isInfix": true
            },
            "_niregex": {
              "operatorName": "!~*",
              "operatorKind": "custom",
              "argumentType": "varchar",
              "isInfix": true
            },
            "_nlike": {
              "operatorName": "!~~",
              "operatorKind": "custom",
              "argumentType": "varchar",
              "isInfix": true
            },
            "_nregex": {
              "operatorName": "!~",
              "operatorKind": "custom",
              "argumentType": "varchar",
              "isInfix": true
            },
            "_regex": {
              "operatorName": "~",
              "operatorKind": "custom",
              "argumentType": "varchar",
              "isInfix": true
            },
            "starts_with": {
              "operatorName": "starts_with",
              "operatorKind": "custom",
              "argumentType": "varchar",
              "isInfix": false
            },
            "ts_match_tt": {
              "operatorName": "ts_match_tt",
              "operatorKind": "custom",
              "argumentType": "varchar",
              "isInfix": false
            }
          },
          "typeRepresentation": "string"
        },
        "year": {
          "typeName": "year",
          "schemaName": "public",
          "description": null,
          "aggregateFunctions": {
            "avg": {
              "returnType": "numeric"
            },
            "bit_and": {
              "returnType": "int4"
            },
            "bit_or": {
              "returnType": "int4"
            },
            "bit_xor": {
              "returnType": "int4"
            },
            "max": {
              "returnType": "int4"
            },
            "min": {
              "returnType": "int4"
            },
            "stddev": {
              "returnType": "numeric"
            },
            "stddev_pop": {
              "returnType": "numeric"
            },
            "stddev_samp": {
              "returnType": "numeric"
            },
            "sum": {
              "returnType": "int8"
            },
            "var_pop": {
              "returnType": "numeric"
            },
            "var_samp": {
              "returnType": "numeric"
            },
            "variance": {
              "returnType": "numeric"
            }
          },
          "comparisonOperators": {
            "_eq": {
              "operatorName": "=",
              "operatorKind": "equal",
              "argumentType": "year",
              "isInfix": true
            },
            "_gt": {
              "operatorName": ">",
              "operatorKind": "custom",
              "argumentType": "year",
              "isInfix": true
            },
            "_gte": {
              "operatorName": ">=",
              "operatorKind": "custom",
              "argumentType": "year",
              "isInfix": true
            },
            "_in": {
              "operatorName": "IN",
              "operatorKind": "in",
              "argumentType": "year",
              "isInfix": true
            },
            "_lt": {
              "operatorName": "<",
              "operatorKind": "custom",
              "argumentType": "year",
              "isInfix": true
            },
            "_lte": {
              "operatorName": "<=",
              "operatorKind": "custom",
              "argumentType": "year",
              "isInfix": true
            },
            "_neq": {
              "operatorName": "<>",
              "operatorKind": "custom",
              "argumentType": "year",
              "isInfix": true
            }
          },
          "typeRepresentation": "int32"
        }
      },
      "composite": {}
    },
    "nativeOperations": {
      "queries": {},
      "mutations": {}
    }
  },
  "introspectionOptions": {
    "excludedSchemas": [
      "information_schema",
      "pg_catalog",
      "tiger",
      "crdb_internal",
      "columnar",
      "columnar_internal"
    ],
    "unqualifiedSchemasForTables": [
      "public"
    ],
    "unqualifiedSchemasForTypesAndProcedures": [
      "public",
      "pg_catalog",
      "tiger"
    ],
    "comparisonOperatorMapping": [
      {
        "operatorName": "=",
        "exposedName": "_eq",
        "operatorKind": "equal"
      },
      {
        "operatorName": "<=",
        "exposedName": "_lte",
        "operatorKind": "custom"
      },
      {
        "operatorName": ">",
        "exposedName": "_gt",
        "operatorKind": "custom"
      },
      {
        "operatorName": ">=",
        "exposedName": "_gte",
        "operatorKind": "custom"
      },
      {
        "operatorName": "<",
        "exposedName": "_lt",
        "operatorKind": "custom"
      },
      {
        "operatorName": "<>",
        "exposedName": "_neq",
        "operatorKind": "custom"
      },
      {
        "operatorName": "!=",
        "exposedName": "_neq",
        "operatorKind": "custom"
      },
      {
        "operatorName": "LIKE",
        "exposedName": "_like",
        "operatorKind": "custom"
      },
      {
        "operatorName": "NOT LIKE",
        "exposedName": "_nlike",
        "operatorKind": "custom"
      },
      {
        "operatorName": "ILIKE",
        "exposedName": "_ilike",
        "operatorKind": "custom"
      },
      {
        "operatorName": "NOT ILIKE",
        "exposedName": "_nilike",
        "operatorKind": "custom"
      },
      {
        "operatorName": "SIMILAR TO",
        "exposedName": "_similar",
        "operatorKind": "custom"
      },
      {
        "operatorName": "NOT SIMILAR TO",
        "exposedName": "_nsimilar",
        "operatorKind": "custom"
      },
      {
        "operatorName": "~~",
        "exposedName": "_like",
        "operatorKind": "custom"
      },
      {
        "operatorName": "!~~",
        "exposedName": "_nlike",
        "operatorKind": "custom"
      },
      {
        "operatorName": "~~*",
        "exposedName": "_ilike",
        "operatorKind": "custom"
      },
      {
        "operatorName": "!~~*",
        "exposedName": "_nilike",
        "operatorKind": "custom"
      },
      {
        "operatorName": "~",
        "exposedName": "_regex",
        "operatorKind": "custom"
      },
      {
        "operatorName": "!~",
        "exposedName": "_nregex",
        "operatorKind": "custom"
      },
      {
        "operatorName": "~*",
        "exposedName": "_iregex",
        "operatorKind": "custom"
      },
      {
        "operatorName": "!~*",
        "exposedName": "_niregex",
        "operatorKind": "custom"
      }
    ],
    "introspectPrefixFunctionComparisonOperators": [
      "box_above",
      "box_below",
      "box_contain",
      "box_contain_pt",
      "box_contained",
      "box_left",
      "box_overabove",
      "box_overbelow",
      "box_overlap",
      "box_overleft",
      "box_overright",
      "box_right",
      "box_same",
      "circle_above",
      "circle_below",
      "circle_contain",
      "circle_contain_pt",
      "circle_contained",
      "circle_left",
      "circle_overabove",
      "circle_overbelow",
      "circle_overlap",
      "circle_overleft",
      "circle_overright",
      "circle_right",
      "circle_same",
      "contains_2d",
      "equals",
      "geography_overlaps",
      "geometry_above",
      "geometry_below",
      "geometry_contained_3d",
      "geometry_contains",
      "geometry_contains_3d",
      "geometry_contains_nd",
      "geometry_left",
      "geometry_overabove",
      "geometry_overbelow",
      "geometry_overlaps",
      "geometry_overlaps_3d",
      "geometry_overlaps_nd",
      "geometry_overleft",
      "geometry_overright",
      "geometry_right",
      "geometry_same",
      "geometry_same_3d",
      "geometry_same_nd",
      "geometry_within",
      "geometry_within_nd",
      "inet_same_family",
      "inter_lb",
      "inter_sb",
      "inter_sl",
      "is_contained_2d",
      "ishorizontal",
      "isparallel",
      "isperp",
      "isvertical",
      "jsonb_contained",
      "jsonb_contains",
      "jsonb_exists",
      "jsonb_path_exists_opr",
      "jsonb_path_match_opr",
      "line_intersect",
      "line_parallel",
      "line_perp",
      "lseg_intersect",
      "lseg_parallel",
      "lseg_perp",
      "network_overlap",
      "network_sub",
      "network_subeq",
      "network_sup",
      "network_supeq",
      "on_pb",
      "on_pl",
      "on_ppath",
      "on_ps",
      "on_sb",
      "on_sl",
      "overlaps_2d",
      "path_contain_pt",
      "path_inter",
      "point_above",
      "point_below",
      "point_horiz",
      "point_left",
      "point_right",
      "point_vert",
      "poly_above",
      "poly_below",
      "poly_contain",
      "poly_contain_pt",
      "poly_contained",
      "poly_left",
      "poly_overabove",
      "poly_overbelow",
      "poly_overlap",
      "poly_overleft",
      "poly_overright",
      "poly_right",
      "poly_same",
      "pt_contained_poly",
      "st_3dintersects",
      "st_contains",
      "st_containsproperly",
      "st_coveredby",
      "st_covers",
      "st_crosses",
      "st_disjoint",
      "st_equals",
      "st_intersects",
      "st_isvalid",
      "st_orderingequals",
      "st_overlaps",
      "st_relatematch",
      "st_touches",
      "st_within",
      "starts_with",
      "ts_match_qv",
      "ts_match_tq",
      "ts_match_tt",
      "ts_match_vq",
      "tsq_mcontained",
      "tsq_mcontains",
      "xmlexists",
      "xmlvalidate",
      "xpath_exists"
    ],
    "typeRepresentations": {
      "bit": "string",
      "bool": "boolean",
      "bpchar": "string",
      "char": "string",
      "date": "date",
      "float4": "float32",
      "float8": "float64",
      "int2": "int16",
      "int4": "int32",
      "int8": "int64AsString",
      "numeric": "bigDecimalAsString",
      "text": "string",
      "time": "time",
      "timestamp": "timestamp",
      "timestamptz": "timestamptz",
      "timetz": "timetz",
      "uuid": "uUID",
      "varchar": "string"
    }
  },
  "mutationsVersion": null
}
